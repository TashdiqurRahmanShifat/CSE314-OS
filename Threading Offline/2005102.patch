diff --git a/Makefile b/Makefile
index 62fd0f8..0da83ea 100644
--- a/Makefile
+++ b/Makefile
@@ -139,6 +139,7 @@ UPROGS=\
 	$U/_grind\
 	$U/_wc\
 	$U/_zombie\
+	$U/_threads\
 
 fs.img: mkfs/mkfs README $(UPROGS)
 	mkfs/mkfs fs.img README $(UPROGS)
diff --git a/kernel/defs.h b/kernel/defs.h
index d1b6bb9..4e183c9 100644
--- a/kernel/defs.h
+++ b/kernel/defs.h
@@ -107,6 +107,14 @@ int             either_copyout(int user_dst, uint64 dst, void *src, uint64 len);
 int             either_copyin(void *dst, int user_src, uint64 src, uint64 len);
 void            procdump(void);
 
+
+int             thread_create(uint64,uint64,uint64);
+int             thread_join(int);
+void            acquire_memlock(int);
+void            release_memlock(int);
+void            thread_freepagetable(pagetable_t, uint64);
+void            uvmfree_thread(pagetable_t, uint64);
+
 // swtch.S
 void            swtch(struct context*, struct context*);
 
@@ -165,6 +173,7 @@ void            uvmfirst(pagetable_t, uchar *, uint);
 uint64          uvmalloc(pagetable_t, uint64, uint64, int);
 uint64          uvmdealloc(pagetable_t, uint64, uint64);
 int             uvmcopy(pagetable_t, pagetable_t, uint64);
+int             uvmmirror(pagetable_t, pagetable_t, uint64, uint64);
 void            uvmfree(pagetable_t, uint64);
 void            uvmunmap(pagetable_t, uint64, uint64, int);
 void            uvmclear(pagetable_t, uint64);
diff --git a/kernel/proc.c b/kernel/proc.c
index 58a8a0b..7aa3873 100644
--- a/kernel/proc.c
+++ b/kernel/proc.c
@@ -53,6 +53,7 @@ procinit(void)
   initlock(&wait_lock, "wait_lock");
   for(p = proc; p < &proc[NPROC]; p++) {
       initlock(&p->lock, "proc");
+      initlock(&p->memlock,"mem");
       p->state = UNUSED;
       p->kstack = KSTACK((int) (p - proc));
   }
@@ -123,6 +124,7 @@ allocproc(void)
 
 found:
   p->pid = allocpid();
+  p->mem_id=p->pid;
   p->state = USED;
 
   // Allocate a trapframe page.
@@ -158,8 +160,15 @@ freeproc(struct proc *p)
   if(p->trapframe)
     kfree((void*)p->trapframe);
   p->trapframe = 0;
+  acquire_memlock(p->mem_id);
   if(p->pagetable)
-    proc_freepagetable(p->pagetable, p->sz);
+  {
+    if(p->is_thread==0)
+      proc_freepagetable(p->pagetable, p->sz);
+    else if(p->is_thread==1)
+      thread_freepagetable(p->pagetable, p->sz);
+  }
+  release_memlock(p->mem_id);
   p->pagetable = 0;
   p->sz = 0;
   p->pid = 0;
@@ -168,6 +177,8 @@ freeproc(struct proc *p)
   p->chan = 0;
   p->killed = 0;
   p->xstate = 0;
+  p->mem_id=0;
+  p->is_thread=0;
   p->state = UNUSED;
 }
 
@@ -215,6 +226,14 @@ proc_freepagetable(pagetable_t pagetable, uint64 sz)
   uvmfree(pagetable, sz);
 }
 
+void
+thread_freepagetable(pagetable_t pagetable, uint64 sz)
+{
+  uvmunmap(pagetable, TRAMPOLINE, 1, 0);
+  uvmunmap(pagetable, TRAPFRAME, 1, 0);
+  uvmfree_thread(pagetable, sz);
+}
+
 // a user program that calls exec("/init")
 // assembled from ../user/initcode.S
 // od -t xC ../user/initcode
@@ -261,16 +280,40 @@ growproc(int n)
 {
   uint64 sz;
   struct proc *p = myproc();
+  //start
+  struct proc *newp;
+  int isAllocated=-1;
+  acquire_memlock(p->mem_id);
 
   sz = p->sz;
   if(n > 0){
+    isAllocated=1;
     if((sz = uvmalloc(p->pagetable, sz, sz + n, PTE_W)) == 0) {
+      release_memlock(p->mem_id);
       return -1;
     }
   } else if(n < 0){
+    isAllocated=0;
     sz = uvmdealloc(p->pagetable, sz, sz + n);
   }
   p->sz = sz;
+  for(newp=proc;newp<&proc[NPROC];newp++)
+  {
+    if((newp->pid!=p->pid)&&(newp->mem_id==p->mem_id))
+    {
+      if(isAllocated==1)
+      {
+        uvmmirror(p->pagetable,newp->pagetable,newp->sz,p->sz);
+        newp->sz=p->sz;
+      }
+      else if(isAllocated==0)
+      {
+        uvmunmap(newp->pagetable,PGROUNDUP(p->sz),((PGROUNDUP(newp->sz)-PGROUNDUP(newp->sz))/PGSIZE),0);
+        newp->sz=p->sz;
+      }
+    }
+  }
+  release_memlock(p->mem_id);
   return 0;
 }
 
@@ -325,6 +368,77 @@ fork(void)
   return pid;
 }
 
+
+//thread
+
+int
+thread_create(uint64 fcn, uint64 arg, uint64 stack)
+{
+    int i, pid;
+    struct proc *np;
+    struct proc *p = myproc();
+
+    if ((np = allocproc()) == 0) {
+        return -1;  
+    }
+
+    acquire_memlock(p->mem_id);
+    if (uvmmirror(p->pagetable, np->pagetable, 0,p->sz) < 0) {
+        release_memlock(p->mem_id);
+        freeproc(np);
+        release(&np->lock);
+        return -1; 
+    }
+    release_memlock(p->mem_id);
+    np->sz = p->sz;
+    np->mem_id=p->mem_id;
+
+    // Copy saved user registers.
+    *(np->trapframe) = *(p->trapframe);
+
+
+    np->trapframe->a0 = arg;  
+    np->trapframe->epc = fcn;//Set function pointer
+
+    // Calculate the stack pointer with proper alignment
+    uint64 stckpointer = stack + PGSIZE;
+    stckpointer -= sizeof(uint64);
+    stckpointer -= stckpointer % 16;//Ensure stack is aligned to 16-byte boundary
+    np->trapframe->sp = stckpointer; //Set stack pointer
+
+    np->trapframe->ra = 0xffffffff;//Set return address 
+
+    np->is_thread = 1;
+
+    for (i = 0; i < NOFILE; i++) {
+        if (p->ofile[i]) {
+            np->ofile[i] = filedup(p->ofile[i]);
+        }
+    }
+    np->cwd = idup(p->cwd);
+
+    safestrcpy(np->name, p->name, sizeof(p->name));
+
+    pid = np->pid;
+
+    release(&np->lock);
+
+    acquire(&wait_lock);
+    np->parent = p;
+    release(&wait_lock);
+
+    acquire(&np->lock);
+    np->state = RUNNABLE;
+    release(&np->lock);
+
+    return pid; 
+}
+
+
+
+
+//end
+
 // Pass p's abandoned children to init.
 // Caller must hold wait_lock.
 void
@@ -434,6 +548,62 @@ wait(uint64 addr)
   }
 }
 
+
+
+
+//Join
+
+int
+thread_join(int thread_id)
+{
+  struct proc *pp;
+  int havekids, pid;
+  struct proc *p = myproc();
+
+  acquire(&wait_lock);
+
+  for(;;){
+    // Scan through table looking for exited children.
+    havekids = 0;
+    for(pp = proc; pp < &proc[NPROC]; pp++){
+      if(pp->parent == p){
+        // make sure the child isn't still in exit() or swtch().
+        acquire(&pp->lock);
+
+        havekids = 1;
+        if(pp->state == ZOMBIE&&pp->is_thread==1&&pp->pid==thread_id){
+          // Found one.
+          pid = pp->pid;
+          // if(addr != 0 && copyout(p->pagetable, addr, (char *)&pp->xstate,
+          //                         sizeof(pp->xstate)) < 0) {
+          //   release(&pp->lock);
+          //   release(&wait_lock);
+          //   return -1;
+          // }
+          freeproc(pp);
+          release(&pp->lock);
+          release(&wait_lock);
+          return pid;
+        }
+        release(&pp->lock);
+      }
+    }
+
+    // No point waiting if we don't have any children.
+    if(!havekids || killed(p)){
+      release(&wait_lock);
+      return -1;
+    }
+    
+    // Wait for a child to exit.
+    sleep(p, &wait_lock);  //DOC: wait-sleep
+  }
+}
+
+
+//end
+
+
 // Per-CPU process scheduler.
 // Each CPU calls scheduler() after setting itself up.
 // Scheduler never returns.  It loops, doing:
@@ -686,3 +856,28 @@ procdump(void)
     printf("\n");
   }
 }
+
+
+void acquire_memlock(int mem_id) 
+{
+  struct proc *p;
+  for(p=proc;p<&proc[NPROC];p++)
+  {
+    if(p->mem_id==mem_id)
+    {
+      acquire(&p->memlock);
+    }
+  }
+}
+
+void release_memlock(int mem_id) 
+{
+  struct proc *p;
+  for(p=proc;p<&proc[NPROC];p++) 
+  {
+    if(p->mem_id==mem_id) 
+    {
+      release(&p->memlock);
+    }
+  }
+}
diff --git a/kernel/proc.h b/kernel/proc.h
index d021857..c13433a 100644
--- a/kernel/proc.h
+++ b/kernel/proc.h
@@ -95,6 +95,7 @@ struct proc {
   // wait_lock must be held when using this:
   struct proc *parent;         // Parent process
 
+
   // these are private to the process, so p->lock need not be held.
   uint64 kstack;               // Virtual address of kernel stack
   uint64 sz;                   // Size of process memory (bytes)
@@ -104,4 +105,9 @@ struct proc {
   struct file *ofile[NOFILE];  // Open files
   struct inode *cwd;           // Current directory
   char name[16];               // Process name (debugging)
+
+  //Additional
+  struct spinlock memlock;	   // find places to set and release the locks 
+  int is_thread;               // if it is thread
+  int mem_id;                  // All threads will have the same physical pages with the mothrer, hence the same memory ID
 };
diff --git a/kernel/syscall.c b/kernel/syscall.c
index ed65409..d687ffd 100644
--- a/kernel/syscall.c
+++ b/kernel/syscall.c
@@ -101,6 +101,9 @@ extern uint64 sys_unlink(void);
 extern uint64 sys_link(void);
 extern uint64 sys_mkdir(void);
 extern uint64 sys_close(void);
+extern uint64 sys_thread_create(void);
+extern uint64 sys_thread_join(void);
+extern uint64 sys_thread_exit(void);
 
 // An array mapping syscall numbers from syscall.h
 // to the function that handles the system call.
@@ -126,6 +129,9 @@ static uint64 (*syscalls[])(void) = {
 [SYS_link]    sys_link,
 [SYS_mkdir]   sys_mkdir,
 [SYS_close]   sys_close,
+[SYS_thread_create] sys_thread_create,
+[SYS_thread_join] sys_thread_join,
+[SYS_thread_exit] sys_thread_exit,
 };
 
 void
diff --git a/kernel/syscall.h b/kernel/syscall.h
index bc5f356..b6abf3a 100644
--- a/kernel/syscall.h
+++ b/kernel/syscall.h
@@ -20,3 +20,6 @@
 #define SYS_link   19
 #define SYS_mkdir  20
 #define SYS_close  21
+#define SYS_thread_create 22
+#define SYS_thread_join 23
+#define SYS_thread_exit 24
diff --git a/kernel/sysproc.c b/kernel/sysproc.c
index 3b4d5bd..c3d7a85 100644
--- a/kernel/sysproc.c
+++ b/kernel/sysproc.c
@@ -91,3 +91,38 @@ sys_uptime(void)
   release(&tickslock);
   return xticks;
 }
+
+
+uint64
+sys_thread_create(void)
+{
+  uint64 fcn, arg, stack;
+
+  argaddr(0,&fcn);
+  argaddr(1,&arg);
+  argaddr(2,&stack);
+  if(fcn == 0 || stack == 0) 
+  {
+    return -1; // Invalid function pointer or stack address
+  }
+
+  return thread_create(fcn, arg, stack);
+}
+
+
+
+
+uint64
+sys_thread_join(void)
+{
+  int tid;
+  argint(0,&tid);
+  return thread_join(tid);
+}
+
+uint64
+sys_thread_exit(void)
+{
+  exit(0);
+  return 0;
+}
\ No newline at end of file
diff --git a/kernel/vm.c b/kernel/vm.c
index 5c31e87..8534aa8 100644
--- a/kernel/vm.c
+++ b/kernel/vm.c
@@ -303,6 +303,18 @@ uvmfree(pagetable_t pagetable, uint64 sz)
   freewalk(pagetable);
 }
 
+//UvmFree
+void
+uvmfree_thread(pagetable_t pagetable, uint64 sz)
+{
+  if(sz > 0)
+    uvmunmap(pagetable, 0, PGROUNDUP(sz)/PGSIZE, 0);
+  freewalk(pagetable);
+}
+
+
+//end
+
 // Given a parent process's page table, copy
 // its memory into a child's page table.
 // Copies both the page table and the
@@ -339,6 +351,40 @@ uvmcopy(pagetable_t old, pagetable_t new, uint64 sz)
   return -1;
 }
 
+
+
+int
+uvmmirror(pagetable_t old, pagetable_t new, uint64 oldsz,uint64 newsz)
+{
+  pte_t *pte;
+  uint64 pa, i;
+  uint flags;
+  //char *mem;
+
+  oldsz=PGROUNDUP(oldsz);
+  for(i = oldsz; i < newsz; i += PGSIZE){
+    if((pte = walk(old, i, 0)) == 0)
+      panic("uvmcopy: pte should exist");
+    if((*pte & PTE_V) == 0)
+      panic("uvmcopy: page not present");
+    pa = PTE2PA(*pte);
+    flags = PTE_FLAGS(*pte);
+    // if((mem = kalloc()) == 0)
+    //   goto err;
+    // memmove(mem, (char*)pa, PGSIZE);
+    if(mappages(new, i, PGSIZE, (uint64)pa, flags) != 0){
+      //kfree(mem);
+      goto err;
+    }
+  }
+  return 0;
+
+ err:
+  uvmunmap(new, 0, i / PGSIZE, 1);
+  return -1;
+}
+
+
 // mark a PTE invalid for user access.
 // used by exec for the user stack guard page.
 void
diff --git a/user/threads.c b/user/threads.c
new file mode 100644
index 0000000..ec44408
--- /dev/null
+++ b/user/threads.c
@@ -0,0 +1,181 @@
+#include "kernel/types.h"
+#include "kernel/stat.h"
+#include "user/user.h"
+
+struct balance {
+    char name[32];
+    int amount;
+};
+
+struct thread_spinlock{
+  int locked;       // Is the lock held?
+};
+
+void 
+thread_spin_init(struct thread_spinlock *lk)
+{
+  lk->locked = 0;
+}
+
+// Acquire the lock.
+// Loops (spins) until the lock is acquired.
+void 
+thread_spin_lock(struct thread_spinlock *lk)
+{
+  while(__sync_lock_test_and_set(&lk->locked, 1) != 0)
+    ;
+    // Tell the C compiler and the processor to not move loads or stores
+  // past this point, to ensure that the critical section's memory
+  // references happen strictly after the lock is acquired.
+  // On RISC-V, this emits a fence instruction.
+  __sync_synchronize();
+}
+
+// Release the lock.
+void
+thread_spin_unlock(struct thread_spinlock *lk)
+{
+  // Tell the C compiler and the CPU to not move loads or stores
+  // past this point, to ensure that all the stores in the critical
+  // section are visible to other CPUs before the lock is released,
+  // and that loads in the critical section occur strictly before
+  // the lock is released.
+  // On RISC-V, this emits a fence instruction.
+  __sync_synchronize();
+
+  // Release the lock, equivalent to lk->locked = 0.
+  // This code doesn't use a C assignment, since the C standard
+  // implies that an assignment might be implemented with
+  // multiple store instructions.
+  // On RISC-V, sync_lock_release turns into an atomic swap:
+  //   s1 = &lk->locked
+  //   amoswap.w zero, zero, (s1)
+  __sync_lock_release(&lk->locked);
+}
+
+
+
+struct thread_mutex{
+  int locked;       // Is the lock held?
+};
+
+void 
+thread_mutex_init(struct thread_mutex *m)
+{
+  m->locked = 0;
+}
+
+// Acquire the lock.
+// Loops (spins) until the lock is acquired.
+void 
+thread_mutex_lock(struct thread_mutex *m)
+{
+  while(__sync_lock_test_and_set(&m->locked, 1) != 0)
+    {
+        sleep(1);
+    }
+    // Tell the C compiler and the processor to not move loads or stores
+  // past this point, to ensure that the critical section's memory
+  // references happen strictly after the lock is acquired.
+  // On RISC-V, this emits a fence instruction.
+  __sync_synchronize();
+}
+
+// Release the lock.
+void
+thread_mutex_unlock(struct thread_mutex *m)
+{
+  // Tell the C compiler and the CPU to not move loads or stores
+  // past this point, to ensure that all the stores in the critical
+  // section are visible to other CPUs before the lock is released,
+  // and that loads in the critical section occur strictly before
+  // the lock is released.
+  // On RISC-V, this emits a fence instruction.
+  __sync_synchronize();
+
+  // Release the lock, equivalent to lk->locked = 0.
+  // This code doesn't use a C assignment, since the C standard
+  // implies that an assignment might be implemented with
+  // multiple store instructions.
+  // On RISC-V, sync_lock_release turns into an atomic swap:
+  //   s1 = &lk->locked
+  //   amoswap.w zero, zero, (s1)
+  __sync_lock_release(&m->locked);
+}
+
+
+volatile int total_balance = 0;
+
+struct thread_spinlock lock;
+struct thread_mutex mlock;
+struct thread_mutex printlock;
+
+volatile unsigned int delay (unsigned int d) {
+   unsigned int i; 
+   for (i = 0; i < d; i++) {
+       __asm volatile( "nop" ::: );
+   }
+
+   return i;   
+}
+
+void do_work(void *arg){
+    int i; 
+    int old;
+   
+    struct balance *b = (struct balance*) arg;  
+    thread_mutex_lock(&printlock);
+    //thread_spin_lock(&lock);
+    printf( "Starting do_work: s:%s\n", b->name);
+    thread_mutex_unlock(&printlock);
+    //thread_spin_unlock(&lock);
+
+    for (i = 0; i < b->amount; i++) { 
+        // lock and mlock will be implemented by you.
+         thread_spin_lock(&lock);
+         //thread_mutex_lock(&mlock);
+         old = total_balance;
+         delay(100000);
+          if(old != total_balance)  
+          {
+            thread_mutex_lock(&printlock);
+            printf("we will miss an update. old: %d total_balance: %d\n", old, total_balance);
+            thread_mutex_unlock(&printlock);
+          }
+         total_balance = old + 1;
+         //printf( "Done s:%s\n", b->name);
+         thread_spin_unlock(&lock);
+         //thread_mutex_unlock(&mlock);
+    }
+  
+    printf( "Done s:%s\n", b->name);
+
+    thread_exit();
+    return;
+}
+
+int main(int argc, char *argv[]) {
+
+  thread_spin_init(&lock);
+  thread_mutex_init(&mlock);
+  thread_mutex_init(&printlock);
+  struct balance b1 = {"b1", 3200};
+  struct balance b2 = {"b2", 2800};
+ 
+  void *s1, *s2;
+  int thread1, thread2, r1, r2;
+
+  s1 = malloc(4096); // 4096 is the PGSIZE defined in kernel/riscv.h
+  s2 = malloc(4096);
+
+  thread1 = thread_create(do_work, (void*)&b1, s1);
+  thread2 = thread_create(do_work, (void*)&b2, s2); 
+
+  r1 = thread_join(thread1);
+  r2 = thread_join(thread2);
+  
+  printf("Threads finished: (%d):%d, (%d):%d, shared balance:%d\n", 
+      thread1, r1, thread2, r2, total_balance);
+
+  exit(0);
+}
\ No newline at end of file
diff --git a/user/user.h b/user/user.h
index 04013ca..d96d6bf 100644
--- a/user/user.h
+++ b/user/user.h
@@ -22,6 +22,9 @@ int getpid(void);
 char* sbrk(int);
 int sleep(int);
 int uptime(void);
+int thread_create(void(*fcn)(void*), void *arg, void*stack);
+int thread_join(int thread_id);
+void thread_exit(void);
 
 // ulib.c
 int stat(const char*, struct stat*);
diff --git a/user/usys.pl b/user/usys.pl
index 01e426e..5c6bc71 100755
--- a/user/usys.pl
+++ b/user/usys.pl
@@ -36,3 +36,6 @@ entry("getpid");
 entry("sbrk");
 entry("sleep");
 entry("uptime");
+entry("thread_create");
+entry("thread_join");
+entry("thread_exit");
\ No newline at end of file
